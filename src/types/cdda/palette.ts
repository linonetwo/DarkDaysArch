/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type CDDAPaletteFieldsValue = CDDAPaletteFieldsValueField | CDDAPaletteFieldsValueField[];
/**
 * @docs MAPGEN.md      Terrain, furniture and traps can specified as a single string, not a json object
 */
export type CDDAPaletteFurnitureValue =
  | string
  | CDDAPaletteFurnitureValueFurniture
  | CDDAPaletteDistribution
  | CDDAPaletteParameterReference;
export type CDDAPaletteDistribution = string | string[] | [string, number] | CDDAPaletteDistributionMixed[];
export type CDDAPaletteDistributionMixed = string | [string, number];
export type CDDAPaletteGaspumpsValue = CDDAPaletteGaspumpsValueGaspump | CDDAPaletteGaspumpsValueGaspump[];
export type CDDAIntRangeOne = number | [number, number];
export type CDDAPaletteGraffitiValue = CDDAPaletteGraffitiValueGraffiti | CDDAPaletteGraffitiValueGraffiti[];
export type CDDAPaletteItemValue = CDDAPaletteItemValueItem | CDDAPaletteItemValueItem[];
export type CDDAPaletteItemsValue = CDDAPaletteItemsValueItem | CDDAPaletteItemsValueItem[];
export type CDDAIntRangeHun = number | [number, number];
export type CDDAPaletteMonsterValue = CDDAPaletteMonsterValueMonster | CDDAPaletteMonsterValueMonster[];
export type CDDAPaletteMonstersValue = CDDAPaletteMonstersValueMonster | CDDAPaletteMonstersValueMonster[];
export type CDDAPaletteNpcsValue = CDDAPaletteNpcsValueNpc | CDDAPaletteNpcsValueNpc[];
export type CDDAStringArray = string | string[];
export type CDDAPaletteRubbleValue = CDDAPaletteRubbleValueRubble | CDDAPaletteRubbleValueRubble[];
export type CDDAPaletteSealedValue = CDDAPaletteSealedValueSealed | CDDAPaletteSealedValueSealed[];
export type CDDAPaletteSealedValueSealed = CDDAPaletteSealedValueSealedItem | CDDAPaletteSealedValueSealedItems;
export type CDDAPaletteSignsValue = CDDAPaletteSignsValueSign | CDDAPaletteSignsValueSign[];
export type CDDAPaletteTransformValue = CDDAPaletteTransformValueTransform | CDDAPaletteTransformValueTransform[];
export type CDDAPaletteTerrainValue =
  | string
  | CDDAPaletteTerrainValueTerrain
  | CDDAPaletteDistribution
  | CDDAPaletteParameterReference;
export type CDDAPaletteToiletsValue = CDDAPaletteToiletsValueToilet | CDDAPaletteToiletsValueToilet[];
export type CDDAPaletteTrapsValue =
  | string
  | CDDAPaletteTrapsValueObject
  | CDDAPaletteDistribution
  | CDDAPaletteParameterReference;
export type CDDAPaletteTrapsValueObject = CDDAPaletteTrapsValueTrap | CDDAPaletteTrapsValueTrap[];
export type CDDAPaletteVehiclesValue = CDDAPaletteVehiclesValueVehicle | CDDAPaletteVehiclesValueVehicle[];
export type CDDAPaletteVendingsValue = CDDAPaletteVendingsValueVending | CDDAPaletteVendingsValueVending[];
export type CDDAPaletteZonesValue = CDDAPaletteZonesValueZone | CDDAPaletteZonesValueZone[];
export type ArrayOf_CDDAPalette = CDDAPalette[];

export interface CDDAPalette {
  "//"?: string;
  fields?: {
    [k: string]: CDDAPaletteFieldsValue[];
  };
  /**
   * @example "furniture": { "c": "f_exercise", "u": [ "f_ergometer", "f_ergometer_mechanical" ]}
   */
  furniture?: {
    [k: string]: CDDAPaletteFurnitureValue;
  };
  gaspumps?: {
    [k: string]: CDDAPaletteGaspumpsValue;
  };
  graffiti?: {
    [k: string]: CDDAPaletteGraffitiValue;
  };
  id: string;
  item?: {
    [k: string]: CDDAPaletteItemValue;
  };
  items?: {
    [k: string]: CDDAPaletteItemsValue;
  };
  liquids?: {
    [k: string]: CDDAPaletteLiquidsValue;
  };
  /**
   * @docs MAPGEN.md   everything using mapping can be included
   */
  mapping?: {
    [k: string]: CDDAMapgenMapping;
  };
  monster?: {
    [k: string]: CDDAPaletteMonsterValue[];
  };
  monsters?: {
    [k: string]: CDDAPaletteMonstersValue[];
  };
  npcs?: {
    [k: string]: CDDAPaletteNpcsValue[];
  };
  parameters?: {
    [k: string]: CDDAPaletteParametersValue;
  };
  rubble?: {
    [k: string]: CDDAPaletteRubbleValue[];
  };
  sealed_item?: {
    [k: string]: CDDAPaletteSealedValue;
  };
  signs?: {
    [k: string]: CDDAPaletteSignsValue[];
  };
  ter_furn_transforms?: {
    [k: string]: CDDAPaletteTransformValue;
  };
  terrain?: {
    [k: string]: CDDAPaletteTerrainValue;
  };
  /**
   * @example "toilets": { "&": { "amount": [ 0, 40 ] } }
   */
  toilets?: {
    [k: string]: CDDAPaletteToiletsValue;
  };
  traps?: {
    [k: string]: CDDAPaletteTrapsValue[];
  };
  type: string;
  vehicles?: {
    [k: string]: CDDAPaletteVehiclesValue;
  };
  vendingmachines?: {
    [k: string]: CDDAPaletteVendingsValue[];
  };
  zones?: {
    [k: string]: CDDAPaletteZonesValue;
  };
  [k: string]: unknown;
}
export interface CDDAPaletteFieldsValueField {
  /**
   * @docs MAPGEN.md   default 0
   */
  age?: number;
  field: string;
  /**
   * @docs MAPGEN.md    default 1, possible 1, 2, 3 or more        originally density in old version
   */
  intensity?: number;
  [k: string]: unknown;
}
export interface CDDAPaletteFurnitureValueFurniture {
  furniture: string;
  [k: string]: unknown;
}
export interface CDDAPaletteParameterReference {
  fallback: string;
  param: string;
  [k: string]: unknown;
}
export interface CDDAPaletteGaspumpsValueGaspump {
  /**
   * @docs MAPGEN.md    default is random? or zero?
   */
  amount?: CDDAIntRangeOne & number;
  /**
   * @docs MAPGEN.md    type of fuel   default unknown   gasoline maybe?
   */
  feul?: string;
  [k: string]: unknown;
}
export interface CDDAPaletteGraffitiValueGraffiti {
  /**
   * @docs MAPGEN.md    the massage shown
   */
  signage?: string;
  /**
   * @docs MAPGEN.md   a category of snippet?
   */
  snippet?: string;
  [k: string]: unknown;
}
export interface CDDAPaletteItemValueItem {
  /**
   * @docs MAPGEN.md   int or min-max  default 1
   */
  amount?: CDDAIntRangeOne;
  /**
   * @docs MAPGEN.md    "chance": x means   one in x  int or min-max   default 1
   */
  chance?: CDDAIntRangeOne;
  item: string;
  /**
   * @docs MAPGEN.md   int or min-max  default 1
   */
  repeat?: CDDAIntRangeOne;
  [k: string]: unknown;
}
export interface CDDAPaletteItemsValueItem {
  ammo?: number;
  /**
   * @docs MAPGEN.md    "chance": x means    x% int or min-max   default 100
   */
  chance?: CDDAIntRangeHun;
  item: string;
  magazine?: number;
  /**
   * @docs MAPGEN.md   int or min-max  default 1
   */
  repeat?: CDDAIntRangeOne;
  [k: string]: unknown;
}
export interface CDDAPaletteLiquidsValue {
  amount: [number, number];
  /**
   * @docs MAPGEN.md    "chance": x means    one in x  int or min-max
   */
  chance?: CDDAIntRangeOne;
  liquid: string;
  [k: string]: unknown;
}
export interface CDDAMapgenMapping {
  fields?: {
    [k: string]: CDDAPaletteFieldsValue[];
  };
  /**
   * @example "furniture": { "c": "f_exercise", "u": [ "f_ergometer", "f_ergometer_mechanical" ]}
   */
  furniture?: {
    [k: string]: CDDAPaletteFurnitureValue;
  };
  gaspumps?: {
    [k: string]: CDDAPaletteGaspumpsValue;
  };
  graffiti?: {
    [k: string]: CDDAPaletteGraffitiValue;
  };
  item?: {
    [k: string]: CDDAPaletteItemValue;
  };
  items?: {
    [k: string]: CDDAPaletteItemsValue;
  };
  liquids?: {
    [k: string]: CDDAPaletteLiquidsValue;
  };
  monster?: {
    [k: string]: CDDAPaletteMonsterValue[];
  };
  monsters?: {
    [k: string]: CDDAPaletteMonstersValue[];
  };
  npcs?: {
    [k: string]: CDDAPaletteNpcsValue[];
  };
  rubble?: {
    [k: string]: CDDAPaletteRubbleValue[];
  };
  sealed_item?: {
    [k: string]: CDDAPaletteSealedValue;
  };
  signs?: {
    [k: string]: CDDAPaletteSignsValue[];
  };
  ter_furn_transforms?: {
    [k: string]: CDDAPaletteTransformValue;
  };
  terrain?: {
    [k: string]: CDDAPaletteTerrainValue;
  };
  /**
   * @example "toilets": { "&": { "amount": [ 0, 40 ] } }
   */
  toilets?: {
    [k: string]: CDDAPaletteToiletsValue;
  };
  traps?: {
    [k: string]: CDDAPaletteTrapsValue[];
  };
  vehicles?: {
    [k: string]: CDDAPaletteVehiclesValue;
  };
  vendingmachines?: {
    [k: string]: CDDAPaletteVendingsValue[];
  };
  zones?: {
    [k: string]: CDDAPaletteZonesValue;
  };
  [k: string]: unknown;
}
export interface CDDAPaletteMonsterValueMonster {
  /**
   * @docs MAPGEN.md    default is false
   */
  friendly?: boolean;
  monster: string;
  /**
   * @docs MAPGEN.md    special name default is nameless @srcs mapgen.cpp     jmapgen_monster   constructor  default  "None"?
   */
  name?: string;
  /**
   * @docs MAPGEN.md    a mission target or not @srcs mapgen.cpp     jmapgen_monster   constructor  default false
   */
  target?: boolean;
  [k: string]: unknown;
}
export interface CDDAPaletteMonstersValueMonster {
  /**
   * @docs MAPGEN.md    "chance": x means    one in x   int or min-max
   */
  chance?: CDDAIntRangeOne;
  /**
   * @docs MAPGEN.md    if not present, use default density limited by distance between city center use -1.0 to represent default
   */
  density?: number;
  monster: string;
  [k: string]: unknown;
}
export interface CDDAPaletteNpcsValueNpc {
  /**
   * @docs MAPGEN.md   default 0
   */
  add_trait?: CDDAStringArray & string;
  class: string;
  /**
   * @docs MAPGEN.md    a mission target or not   default false @srcs mapgen.cpp     jmapgen_npc   constructor
   */
  target?: boolean;
  [k: string]: unknown;
}
export interface CDDAPaletteRubbleValueRubble {
  /**
   * @docs MAPGEN.md    ter id     default is t_dirt
   */
  floor_type?: string;
  /**
   * @docs MAPGEN.md    bashing items will or not   default is false
   */
  items?: boolean;
  /**
   * @docs MAPGEN.md    if true it just writes on top of what currently exists  default false
   */
  overwrite?: boolean;
  /**
   * @docs MAPGEN.md    furniture id     default is f_rubble
   */
  rubble_type?: string;
  [k: string]: unknown;
}
export interface CDDAPaletteSealedValueSealedItem {
  furniture: string;
  /**
   * @docs MAPGEN.md    single item
   */
  item?: CDDAPaletteItemValue | null;
  [k: string]: unknown;
}
export interface CDDAPaletteSealedValueSealedItems {
  furniture: string;
  /**
   * @docs MAPGEN.md    item group
   */
  items?: CDDAPaletteItemsValue | null;
  [k: string]: unknown;
}
export interface CDDAPaletteSignsValueSign {
  /**
   * @docs MAPGEN.md    the massage shown
   */
  signage?: string;
  /**
   * @docs MAPGEN.md   a category of snippet?
   */
  snippet?: string;
  [k: string]: unknown;
}
export interface CDDAPaletteTransformValueTransform {
  /**
   * @docs MAPGEN.md    the id of the `ter_furn_transform` to run
   */
  transform: string;
  [k: string]: unknown;
}
export interface CDDAPaletteTerrainValueTerrain {
  terrain: string;
  [k: string]: unknown;
}
export interface CDDAPaletteToiletsValueToilet {
  /**
   * @docs MAPGEN.md    default is random? or zero?
   */
  amount?: CDDAIntRangeOne & number;
  [k: string]: unknown;
}
export interface CDDAPaletteTrapsValueTrap {
  trap: string;
  [k: string]: unknown;
}
export interface CDDAPaletteVehiclesValueVehicle {
  /**
   * @docs MAPGEN.md    type of fuel   default unknown   gasoline maybe?
   */
  feul?: string;
  /**
   * @docs MAPGEN.md    if of vehicle id or vehicle group id
   */
  vehicle: string;
  [k: string]: unknown;
}
export interface CDDAPaletteVendingsValueVending {
  /**
   * @docs MAPGEN.md    "chance": x means    x% int or min-max   default 1    1% low prob
   */
  chance?: CDDAIntRangeOne;
  /**
   * @docs MAPGEN.md    fuel status    default -1   -1 means 1%-7% fuel
   */
  feul?: number;
  /**
   * @docs MAPGEN.md    default randomly choose one of "vending_food" or "vending_drink"
   */
  item_group?: string;
  /**
   * @docs MAPGEN.md   360 degree
   */
  rotation?: number;
  /**
   * @docs MAPGEN.md    body status    default -1   -1 means light damage    0 perfect    1 heavy damage
   */
  status?: number;
  [k: string]: unknown;
}
export interface CDDAPaletteZonesValueZone {
  /**
   * @docs MAPGEN.md    fraction id
   */
  faction: string;
  /**
   * @docs MAPGEN.md    the name of the zone
   */
  name?: string;
  /**
   * @docs MAPGEN.md    Values: `"NPC_RETREAT"`, `"NPC_NO_INVESTIGATE"`, or `"NPC_INVESTIGATE_ONLY"`
   */
  type: string;
  [k: string]: unknown;
}
export interface CDDAPaletteParametersValue {
  default: CDDAPaletteParametersValueDefault;
  type: string;
  [k: string]: unknown;
}
export interface CDDAPaletteParametersValueDefault {
  distribution: CDDAPaletteDistribution;
  [k: string]: unknown;
}
