{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Array_of_CDDATerrain",
  "type": "array",
  "items": {
    "$ref": "#/definitions/CDDATerrain"
  },
  "definitions": {
    "CDDABashDeconItem": {
      "type": "object",
      "required": [
        "item"
      ],
      "properties": {
        "charges": {
          "$ref": "#/definitions/CDDAIntRange"
        },
        "count": {
          "$ref": "#/definitions/CDDAIntRange"
        },
        "item": {
          "type": "string"
        },
        "prob": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "CDDABashDeconItems": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CDDABashDeconItem"
          }
        }
      ]
    },
    "CDDAByproduct": {
      "type": "object",
      "required": [
        "count",
        "item"
      ],
      "properties": {
        "count": {
          "$ref": "#/definitions/CDDAIntRange"
        },
        "item": {
          "description": "@srcs mapdata.cpp    activity_byproduct",
          "type": "string"
        }
      }
    },
    "CDDAIntRange": {
      "anyOf": [
        {
          "type": "integer",
          "format": "int64"
        },
        {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      ]
    },
    "CDDAName": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "$ref": "#/definitions/CDDATranslation"
        }
      ]
    },
    "CDDAStringArray": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "CDDATerFurnBoltcut": {
      "type": "object",
      "properties": {
        "byproducts": {
          "description": "@srcs mapdata.cpp    activity_data_common",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/CDDAByproduct"
          }
        },
        "duration": {
          "description": "@srcs mapdata.cpp    activity_data_common     time used",
          "allOf": [
            {
              "$ref": "#/definitions/CDDATime"
            }
          ]
        },
        "message": {
          "description": "@srcs mapdata.cpp    activity_data_common    message",
          "default": "",
          "type": "string"
        },
        "result": {
          "description": "@srcs mapdata.cpp    activity_data_ter   ter or furn id    limited by original ter or furn",
          "default": "",
          "type": "string"
        },
        "sound": {
          "description": "@srcs mapdata.cpp    activity_data_common    sound",
          "default": "",
          "type": "string"
        },
        "valid": {
          "description": "@srcs mapdata.cpp    activity_data_common",
          "default": false,
          "type": "boolean"
        }
      }
    },
    "CDDATerFurnShoot": {
      "type": "object",
      "required": [
        "destroy_damage",
        "reduce_damage",
        "reduce_damage_laser"
      ],
      "properties": {
        "chance_to_hit": {
          "description": "@srcs mapdata.cpp  map_shoot_info   Base chance to hit the object at all (defaults to 100%)",
          "type": "integer",
          "format": "int64"
        },
        "destroy_damage": {
          "description": "@srcs mapdata.cpp  map_shoot_info   damage range required to have a chance to destroy",
          "type": "array",
          "items": [
            {
              "type": "integer",
              "format": "int64"
            },
            {
              "type": "integer",
              "format": "int64"
            }
          ],
          "maxItems": 2,
          "minItems": 2
        },
        "no_laser_destroy": {
          "description": "@srcs mapdata.cpp  map_shoot_info   Are lasers incapable of destroying the object (defaults to false)",
          "type": "boolean"
        },
        "reduce_damage": {
          "description": "@srcs mapdata.cpp  map_shoot_info   damage reduction range to apply to shot when hit",
          "type": "array",
          "items": [
            {
              "type": "integer",
              "format": "int64"
            },
            {
              "type": "integer",
              "format": "int64"
            }
          ],
          "maxItems": 2,
          "minItems": 2
        },
        "reduce_damage_laser": {
          "description": "@srcs mapdata.cpp  map_shoot_info   damage reduction range to apply to laser shot when hit",
          "type": "array",
          "items": [
            {
              "type": "integer",
              "format": "int64"
            },
            {
              "type": "integer",
              "format": "int64"
            }
          ],
          "maxItems": 2,
          "minItems": 2
        }
      }
    },
    "CDDATerrain": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "abstrct": {
          "type": [
            "string",
            "null"
          ]
        },
        "allowed_template_ids": {
          "description": "@srcs mapdata.cpp    ter_t    ???",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "bash": {
          "description": "@docs JSON_INFO.md   if not defined, cannot be bashed to broken",
          "anyOf": [
            {
              "$ref": "#/definitions/CDDATerrainBash"
            },
            {
              "type": "null"
            }
          ]
        },
        "bgcolor": {
          "description": "background color",
          "default": "",
          "type": "string"
        },
        "boltcut": {
          "description": "@docs JSON_INFO.md  Data for using with an bolt cutter    if not defined, cannot be boltcut ?   0.F not included",
          "anyOf": [
            {
              "$ref": "#/definitions/CDDATerFurnBoltcut"
            },
            {
              "type": "null"
            }
          ]
        },
        "bonus_fire_warmth_feet": {
          "description": "@docs JSON_INFO.md   Increase warmth received on feet from nearby fire  (default = 300)",
          "type": "integer",
          "format": "int64"
        },
        "close": {
          "description": "@docs JSON_INFO.md   transforms to when closed or opened",
          "type": "string"
        },
        "color": {
          "description": "symbol color",
          "default": "",
          "type": "string"
        },
        "comfort": {
          "description": "@docs JSON_INFO.md   comfort  How comfortable this terrain/furniture is. Impact ability to fall asleep on it.",
          "type": "integer",
          "format": "int64"
        },
        "connects_to": {
          "description": "@docs JSON_INFO.md   can connect to some special types defined by flags",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "copy-from": {
          "type": "string"
        },
        "coverage": {
          "description": "@docs JSON_INFO.md   persentage of coverage",
          "type": "integer",
          "format": "int64"
        },
        "curtain_transform": {
          "description": "@srcs mapdata.cpp    furn needs furn id   ter needs ter id",
          "type": "string"
        },
        "deconstruct": {
          "description": "@docs JSON_INFO.md   if not defined, cannot be deconstructed",
          "anyOf": [
            {
              "$ref": "#/definitions/CDDATerrainDecon"
            },
            {
              "type": "null"
            }
          ]
        },
        "description": {
          "description": "this field have a default value \"\", which need to be replaced with copied one",
          "type": "string"
        },
        "emissions": {
          "description": "@docs JSON_INFO.md    listing the `emit_id` of the fields the terrain/furniture will produce every 10 seconds",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "examine_action": {
          "description": "@docs JSON_INFO.md   from an examine action list",
          "type": "string"
        },
        "flags": {
          "description": "@docs JSON_INFO.md   flags",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "floor_bedding_warmth": {
          "description": "@docs JSON_INFO.md   Bonus warmth offered by this terrain/furniture when used to sleep.",
          "type": "integer",
          "format": "int64"
        },
        "harvest_by_season": {
          "description": "@docs JSON_INFO.md    havest thing by season",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CDDATerrainHarvest"
          }
        },
        "heat_radiation": {
          "description": "@docs JSON_INFO.md   Heat emitted for a terrain. A value of 0 means no fire. A value of 1 equals a fire of intensity of 1. @srcs mapdata.cpp    map_data_common_t     default 0",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "anyOf": [
            {
              "$ref": "#/definitions/CDDAStringArray"
            },
            {
              "type": "null"
            }
          ]
        },
        "lockpick_message": {
          "description": "@docs JSON_INFO.md   When the terrain is successfully lockpicked, this is the message that will be printed to the player. When it is missing, a generic `\"The lock opensâ€¦\"` message will be printed instead.",
          "type": "string"
        },
        "lockpick_result": {
          "description": "@docs JSON_INFO.md    When the terrain is successfully lockpicked, this is the terrain it will turn into.",
          "type": "string"
        },
        "looks_like": {
          "description": "only affects tile loader",
          "type": "string"
        },
        "max_volume": {
          "description": "@srcs mapdata.cpp    default is equal to DEFAULT_MAX_VOLUME_IN_SQUARE=1000L",
          "allOf": [
            {
              "$ref": "#/definitions/CDDAVolume"
            }
          ]
        },
        "move_cost": {
          "description": "@docs  JSON_INFO.md  Move cost to move through. A value of 0 means it's impassable (e.g. wall). You should not use negative values. The positive value is multiple of 50 move points",
          "default": 0,
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "$ref": "#/definitions/CDDAName"
        },
        "open": {
          "type": "string"
        },
        "roof": {
          "description": "@docs JSON_INFO.md    default roof",
          "type": "string"
        },
        "shoot": {
          "description": "@srcs mapdata.cpp   Data for being shot    if not defined, cannot be shot to broken   0.F not included",
          "anyOf": [
            {
              "$ref": "#/definitions/CDDATerFurnShoot"
            },
            {
              "type": "null"
            }
          ]
        },
        "symbol": {
          "description": "acsii symbol",
          "default": "",
          "type": "string"
        },
        "transforms_into": {
          "description": "@docs JSON_INFO.md    used for havest",
          "type": "string"
        },
        "trap": {
          "description": "@docs JSON_INFO.md    build-in trap",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/terrain_Literal"
        }
      }
    },
    "CDDATerrainBash": {
      "type": "object",
      "required": [
        "ter_set"
      ],
      "properties": {
        "bash_below": {
          "description": "@srcs mapdata.cpp    map_bash_info   default false   This terrain is the roof of the tile below it, try to destroy that too",
          "type": "boolean"
        },
        "collapse_radius": {
          "description": "@docs JSON_INFO    Radius of the tent supported by this tile @srcs mapdata.cpp    map_bash_info   default 1",
          "type": "integer",
          "format": "int64"
        },
        "destroy_only": {
          "description": "@srcs mapdata.cpp    map_bash_info   default false   Only used for destroying, not normally bashable",
          "type": "boolean"
        },
        "explosive": {
          "description": "@docs JSON_INFO  If greater than 0, destroying the object causes an explosion with this strength @srcs mapdata.cpp    map_bash_info   default 0",
          "type": "integer",
          "format": "int64"
        },
        "items": {
          "description": "@docs JSON_INFO    An item group (inline) or an id of an item group   default   \"EMPTY_GROUP\"",
          "default": "EMPTY_GROUP",
          "allOf": [
            {
              "$ref": "#/definitions/CDDABashDeconItems"
            }
          ]
        },
        "sound": {
          "description": "@docs JSON_INFO    sound message @srcs mapdata.cpp    map_bash_info   default \"smash!\"",
          "default": "",
          "type": "string"
        },
        "sound_fail": {
          "description": "@docs JSON_INFO    sound message when failing @srcs mapdata.cpp    map_bash_info   default \"thump!\"",
          "default": "",
          "type": "string"
        },
        "sound_fail_vol": {
          "description": "@docs JSON_INFO  sound volume when failing bashing @srcs mapdata.cpp    map_bash_info   default -1",
          "type": "integer",
          "format": "int64"
        },
        "sound_vol": {
          "description": "@docs JSON_INFO  sound volume when bashed @srcs mapdata.cpp    map_bash_info   default -1",
          "type": "integer",
          "format": "int64"
        },
        "str_max": {
          "description": "@srcs mapdata.cpp    map_bash_info   default -1  max str required: bash succeeds if str >= random # between str_min & str_max",
          "type": "integer",
          "format": "int64"
        },
        "str_max_blocked": {
          "description": "@srcs mapdata.cpp    map_bash_info   default -1   alternate values for has_adjacent_furniture(...) == true",
          "type": "integer",
          "format": "int64"
        },
        "str_max_supported": {
          "description": "@srcs mapdata.cpp    map_bash_info   default -1  Alternative values for floor supported by something from below",
          "type": "integer",
          "format": "int64"
        },
        "str_min": {
          "description": "@srcs mapdata.cpp    map_bash_info   default -1  min str required to bash",
          "type": "integer",
          "format": "int64"
        },
        "str_min_blocked": {
          "description": "@srcs mapdata.cpp    map_bash_info   default -1   alternate values for has_adjacent_furniture(...) == true",
          "type": "integer",
          "format": "int64"
        },
        "str_min_supported": {
          "description": "@srcs mapdata.cpp    map_bash_info   default -1  Alternative values for floor supported by something from below",
          "type": "integer",
          "format": "int64"
        },
        "tent_centers": {
          "description": "@docs JSON_INFO    For furniture that is part of tents, this defines the id of the center part",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ter_set": {
          "description": "@docs JSON_INFO    ter_set\" is only used upon \"deconstruct\" entries in terrain and is mandatory there.",
          "type": "string"
        },
        "ter_set_bashed_from_above": {
          "description": "@srcs mapdata.cpp    terrain to set if bashed from above (defaults to ter_set)",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "CDDATerrainDecon": {
      "type": "object",
      "properties": {
        "deconstruct_above": {
          "description": "@srcs mapdata.cpp    map_deconstruct_info   default false This terrain provided a roof, we need to tear it down now",
          "default": false,
          "type": "boolean"
        },
        "items": {
          "description": "@docs JSON_INFO    An item group (inline) or an id of an item group   default   \"EMPTY_GROUP\"",
          "default": "EMPTY_GROUP",
          "allOf": [
            {
              "$ref": "#/definitions/CDDABashDeconItems"
            }
          ]
        },
        "ter_set": {
          "description": "@docs JSON_INFO    ter_set\" is only used upon \"deconstruct\" entries in terrain and is mandatory there.",
          "default": "",
          "type": "string"
        }
      }
    },
    "CDDATerrainHarvest": {
      "type": "object",
      "required": [
        "id",
        "seasons"
      ],
      "properties": {
        "id": {
          "description": "@docs JSON_INFO.md    item group",
          "type": "string"
        },
        "seasons": {
          "description": "@docs JSON_INFO.md    in this seasons, item group with id can be got",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CDDATime": {
      "anyOf": [
        {
          "type": "integer",
          "format": "int64"
        },
        {
          "type": "string"
        }
      ]
    },
    "CDDATranslation": {
      "type": "object",
      "properties": {
        "//NOLINT(cata-text-style)": {
          "default": "",
          "type": "string"
        },
        "str": {
          "default": "",
          "type": "string"
        }
      }
    },
    "CDDAVolume": {
      "anyOf": [
        {
          "type": "integer",
          "format": "int64"
        },
        {
          "type": "string"
        }
      ]
    },
    "terrain_Literal": {
      "type": "string",
      "enum": [
        "terrain"
      ]
    }
  }
}