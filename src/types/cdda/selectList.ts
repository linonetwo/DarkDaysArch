/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type CDDAStringArray = string | string[];
export type CDDAName = string | CDDATranslation;
export type CDDAJSONType =
  | "MOD_INFO_Literal"
  | "furniture_Literal"
  | "mapgen_Literal"
  | "overmap_special_Literal"
  | "overmap_terrain_Literal"
  | "overmap_location_Literal"
  | "overmap_connection_Literal"
  | "palette_Literal"
  | "terrain_Literal"
  | "trap_Literal"
  | "EXTERNAL_OPTION_Literal"
  | "ITEM_BLACKLIST_Literal"
  | "region_settings_Literal"
  | "city_building_Literal";
export type ArrayOf_SelectListItemWithType = SelectListItemWithType[];

/**
 * Minimal information about a JSON, this is used as result when searching for a JSON. We can use id in the result to request full JSON content.
 *
 * This is SelectListItem with a `type` field. SelectListItem struct is going to be `serde(flatten)` into many other struct, and the `type` field will overwrite their literal `type` field, so we need to use a `SelectListItemWithType` struct to isolate the general `type` field.
 */
export interface SelectListItemWithType {
  abstrct?: string | null;
  id?: CDDAStringArray | null;
  name?: CDDAName;
  type: CDDAJSONType;
  [k: string]: unknown;
}
export interface CDDATranslation {
  "//NOLINT(cata-text-style)"?: string;
  str?: string;
  [k: string]: unknown;
}
